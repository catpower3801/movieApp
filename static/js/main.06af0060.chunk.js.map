{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie_poster","_ref2","poster","react_default","a","createElement","src","alt","Movie","_ref","title","genres","synopsis","className","console","log","MovieGenres","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_callApi","fetch","then","b","json","c","data","movies","catch","err","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_this","sent","setState","stop","_renderMovies","map","x","index","src_Movie","medium_cover_image","key","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+DA,SAASA,EAATC,GAA+B,IAARC,EAAQD,EAARC,OACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAQK,IAAI,iBAuBfC,MAjEf,SAAAC,GAA8C,IAA9BC,EAA8BD,EAA9BC,MAAMR,EAAwBO,EAAxBP,OAAOS,EAAiBF,EAAjBE,OAAOC,EAAUH,EAAVG,SAChC,OACIT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,QACXV,EAAAC,EAAAC,cAAA,UAAKK,GACLP,EAAAC,EAAAC,cAACL,EAAD,CAAcE,OAAQA,IACtBC,EAAAC,EAAAC,cAAA,SAAsES,QAAQC,IAV1F,SAAqBJ,GACjB,OACIR,EAAAC,EAAAC,cAAA,YAAOM,GAQ+EK,CAAYL,KAC9FR,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACHc,KAAMN,EACNO,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eC4CLC,6MA1EbC,MAAM,KACNC,SAAW,WAET,OAAOC,MAAM,iEAAiEC,KAAK,SAAAC,GAAC,OAAEA,EAAEC,SAAQF,KAAK,SAAAG,GAAC,OAAEA,EAAEC,KAAKC,SAAQC,MAAM,SAAAC,GAAG,OAAEpB,QAAQC,IAAImB,QAUhJC,gCAAY,SAAAC,IAAA,IAAAJ,EAAA,OAAAK,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACWC,EAAKjB,WADhB,OACJO,EADIO,EAAAI,KAEV7B,QAAQC,IAAIiB,GACZU,EAAKE,SAAS,CACZZ,WAJQ,wBAAAO,EAAAM,SAAAT,QAsCZU,cAAgB,WAEd,OADeJ,EAAKlB,MAAMQ,OAAOe,IAAI,SAACC,EAAEC,GAAS,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAOxC,MAAOsC,EAAEtC,MAAOR,OAAQ8C,EAAEG,mBAAoBC,IAAKH,EAAOtC,OAAQqC,EAAErC,OAAQC,SAAUoC,EAAEpC,iGA/BvJyC,KAAKlB,8CAoCN,OACGhC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OAIbwC,KAAK7B,MAAMQ,OAASqB,KAAKP,gBAAkB,kBA/DjCQ,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.06af0060.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n/*\r\nclass Movie extends Component..\r\n장정:state를 쓸 수 있음\r\n    -componentDidMount(),\r\n    compontentWillMount().....\r\n단점:코드가 복잡해짐\r\n\r\nfunction Movie({props1,prosp2})\r\n함수형 컴포넌트(domb Component)\r\n단지 어떤 값을 return 해서 출력해주기만들\r\n위한 컴포넌트\r\n장점:코드가 단순\r\n단점:state가 없음\r\n*/\r\nfunction MovieGenres(genres){\r\n    return(\r\n        <span>{genres}</span>\r\n    )\r\n}\r\nfunction Movie({title,poster,genres,synopsis}){\r\n    return(\r\n        <div className=\"card\">\r\n            <h1>{title}</h1>\r\n            <Movie_poster poster={poster}/>\r\n            <p>{/*genres.map((y,index) => <MovieGenres genres={y} key={index}/>)*/console.log(MovieGenres(genres))}</p>\r\n            <p><LinesEllipsis\r\n            text={synopsis}\r\n            maxLine='3'\r\n            ellipsis='...'\r\n            trimRight\r\n            basedOn='letters'\r\n            /></p>\r\n        </div>\r\n    )\r\n}\r\n/*\r\nclass Movie extends Component{\r\n    static propTypes = {\r\n        title : PropTypes.string.isRequired,\r\n        poster : PropTypes.string.isRequired\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>{this.props.title}</h1>\r\n                <Movie_poster poster={this.props.poster}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n/*\r\ncomponent\r\n- props : 부모로부터 받아오는 값(읽기 전용)\r\n- state : 각각의 컴포넌트가 가지는 객체 string\r\n    state에 변경사항이 있을때 마다\r\n    component가 새로 랜더링 되기 떄문에!!\r\n*/\r\nfunction Movie_poster({poster}){\r\n    return(\r\n        <img src={poster} alt=\"Movie Poster\"/>\r\n    )\r\n}\r\n/*\r\nclass Movie_poster extends Component{\r\n    static propTypes ={\r\n        poster : PropTypes.string.isRequired\r\n    }\r\n    render(){\r\n        return(\r\n            <img src={this.props.poster}/>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\nMovie.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired\r\n}\r\nMovie_poster.propTypes={\r\n    poster:PropTypes.string.isRequired\r\n}\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\nclass App extends Component {\n  state={}\n  _callApi = () =>{\n    //fetch() 자바스크립트로 외부의 url을 가져옴\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count').then(b=>b.json()).then(c=>c.data.movies).catch(err=>console.log(err));\n    //에러가 났을떄 catch\n  } \n  //async : fetch로 받아온 데이터와 그걸 처리하는 then들을 더욱 간결하고 명료하게 만들어주는 도구\n  //fetch(url).then(a => a.json()).then............\n  //fetch와 then을 사용해서 일일이 모든 동작을 지정해주지 않고, fetch가 끝난 다음 바로 실행시킬 것들을 지정할 수 잇게 만드는 tool \n\n  //await\n  //async : 비동기\n  //async : 이전라인 의 작업이 끝날때까지 기다리지 않고 실행 될 작업\n  _getMovies= async () => {\n    const movies = await this._callApi();\n    console.log(movies)\n    this.setState({\n      movies\n    })\n  }\n  componentDidMount(){\n    this._getMovies();\n  }\n/*\ncomponentDidMount(){\n    setTimeout(() => {\n      this.setState({\n        movies : [\n          {\n            title : '타이타닉',\n            poster : 'http://image.cine21.com/resize/cine21/poster/2018/0102/17_50_39__5a4b47df43cd9[X230,330].jpg'\n          },\n          {\n            title : '캡틴마블',\n            poster : 'http://image.cine21.com/resize/cine21/poster/2019/0225/14_10_18__5c7378ba87fb6[X230,330].jpg'\n          },\n          {\n            title : '신데렐라',\n            poster : 'http://image.cine21.com/resize/cine21/poster/2015/0319/13_42_29__550a53b540b97[X230,330].jpg'\n          },\n          {\n            title : '베놈',\n            poster : 'http://image.cine21.com/resize/cine21/poster/2018/0921/11_48_04__5ba45be496c69[X230,330].jpg'\n          }\n        ]\n      })\n    },5000);\n  }\n  */\n  \n  //랜더링 function\n  _renderMovies = () =>{\n    const movies = this.state.movies.map((x,index)=>{return <Movie title={x.title} poster={x.medium_cover_image} key={index} genres={x.genres} synopsis={x.synopsis}/>});\n    return movies;\n  }\n \n render(){\n   return (\n      <div className=\"App\">\n      {\n        //this.state.movies가 있을땐 _renderMovies 실행\n        //state가 비어있는 상황일땐 loading... 문구\n        this.state.movies ? this._renderMovies() : 'Loading'\n        /*if(this.state.moveis){\n          this._renderMovies()\n        }else{\n          'Loading'\n        }\n        */\n      }\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}